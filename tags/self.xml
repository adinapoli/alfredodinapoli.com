<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Alfredo Di Napoli's Tech Blog</title>
    <link href="http://www.alfredodinapoli.com/tags/self.xml" rel="self" />
    <link href="http://www.alfredodinapoli.com" />
    <id>http://www.alfredodinapoli.com/tags/self.xml</id>
    <author>
        <name>Alfredo Di Napoli</name>
        <email>alfredo.dinapoli@gmail.com</email>
    </author>
    <updated>2013-01-18T00:00:00Z</updated>
    <entry>
    <title>Disengage and live better</title>
    <link href="http://www.alfredodinapoli.com/posts/2013-01-18-disengage-and-live-better.html" />
    <id>http://www.alfredodinapoli.com/posts/2013-01-18-disengage-and-live-better.html</id>
    <published>2013-01-18T00:00:00Z</published>
    <updated>2013-01-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m reading a book called <a href="http://www.amazon.com/Power-Full-Engagement-Managing-Performance/dp/0743226755">The power of full engagement</a>, which basically states that is important to alternate periods of great focus (engagement) with period of relax (disengaging). This theory is supported from several concrete example involving tennis athletes or professional, where the best results where obtained building up stress (pushing ourself out the “comfort” zone) and then refilling our energy reserves simply “disconnecting” from the work or from whatever causes us stress.</p>
<p>As a developer, I experience the same constant sense of duty which may be familiar to any other professional: sometimes is very hard to have your mind free of thoughts and is not uncommon that I find myself dwelling on work stuff also in the evening. So I’m trying, as I progress in assimilating all the principles of the book, to disengage in the evening, simply doing something I like (watching Masterchef, programming, reading blogs, learning stuff, etc). But I’ve encountered and extra complication I’ve promptly addressed.</p>
<h3 id="the-blue-dot-mobing">The “blue dot” mobing</h3>
Do you recognize this?
<div data-align="center" data-markdown="1">
<p><img src="/img/2013/blue_dot.png"/></p>
</div>
<p>This could be the nightmare of every programmer! I invented the term “blue dot mobing” to describe a high status of stress deriving to constantly see the dot turning from gray to blue. Where I work, we use Github massively to develop all our software. This often implies that our customers have read access to our repository: this is great because we can provide them with constant feedback, but the other side of the coins is that often they fire up issues/question/bugs at every time during the day, hampering my effort to disengage. Why? Well, I enjoy learning new technology or fiddling with OSS in my spare time, and the last thing I want to see in the Github homepage is the news feed remembering me that Monday morning I will have to deal with some project issues! The problem for me lies in the fact that I subconsciously go to <code>https://github.com</code> and that I usually refresh the page clicking on the small Github logo in the top-left corner of the page. What does this imply? Well, that I see the news feed again, and again, and again! I’ve tried to filter news feed (also with browser’s plugins) but every solution was quite limited. What to do then?</p>
<h3 id="url-redirecting-to-the-rescue">URL redirecting to the rescue</h3>
<p>The solution is as simple as useful. Since Github uses <code>https</code> by default, we can’t simply hardcode the redirect inside <code>etc/hosts</code>. I’ve discovered this useful plugin googling around: is called <a href="https://chrome.google.com/webstore/detail/redirector/lacckjdlmkdhcacjdodpjokfobckjclh">Redirector</a> and it can be daunting if you don’t play around with it a bit. The idea is to be redirected to a new URL everytime we hit <code>https://github.com</code>: yes, but which URL? For me, the solution was to point to my <a href="https://github.com/adinapoli">dashboard</a>: this way, I can still see the blue dot (but I can mark all notification as read and solve the problem), but no more news feed bringing me back to my duties! Configuring Redirector can be tricky, but this revealed to work:</p>
<pre class="shell"><code>Match (RegExp): ^https://github\.com/$
Substitution (RegExp): .*
Replacement: https://github.com/adinapoli/</code></pre>
<p>Done! Now (remember to enable Redirector clicking to the appropriate button, you’ll see a blue icon in the far left corner of the URL bar) everytime we’ll hit Github we’ll be forwarded to the dashboard. Now I have my peace of mind.</p>
<p>Happy disengaging, <br> Alfredo</p>]]></summary>
</entry>
<entry>
    <title>2012 Report</title>
    <link href="http://www.alfredodinapoli.com/posts/2012-12-31-2012-report.html" />
    <id>http://www.alfredodinapoli.com/posts/2012-12-31-2012-report.html</id>
    <published>2012-12-31T00:00:00Z</published>
    <updated>2012-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>2012 has been a big deal for me:</p>
<ul>
<li><p>On May I graduated, taking my master degree in computer science after 5 years of hard work.</p></li>
<li><p>On July, I’ve successfully passed the Cambridge exam for the CAE certificate. This means I now have the C1 level in English.</p></li>
<li><p>On June I started my first work. I landed an internship at <a href="http://www.mbda-systems.com/">MBDA</a>.</p></li>
<li><p>I started contributing on my first Haskell open source project, <a href="http://snapframework.com/">Snap</a>. Working on another, high-regarded project has been a wonderful experience, I’ve learned a lot and I had the satisfaction to see the result of my work included in a new release.</p></li>
<li><p>On November, I landed a job on functional programming (Scala to be precise) at <a href="http://cakesolutions.net">Cake Solutions</a>.</p></li>
</ul>
<p>##What I want from 2013</p>
<ul>
<li><p>A better understanding of Haskell. I’m on the right track, but I want to make the jump into the advanced world.</p></li>
<li><p>Slightly related to the first point, I want to build myself a small algebra background, especially in the category theory. I will help me to sharpen my Haskell’s skills as well.</p></li>
<li><p>I want to submit at least a tiny patch to GHC, because I want to be a part of the community and do my part.</p></li>
<li><p>I want to continue improving Snap and helping Doug and the other outstanding devs to make it better.</p></li>
</ul>
<p>I will be a hard path to take, but I think it will be rewarding. Happy new year everyone,</p>
<p>Alfredo</p>]]></summary>
</entry>
<entry>
    <title>I love to be a windows repairer</title>
    <link href="http://www.alfredodinapoli.com/posts/2012-10-24-i-love-to-be-a-windows-repairer.html" />
    <id>http://www.alfredodinapoli.com/posts/2012-10-24-i-love-to-be-a-windows-repairer.html</id>
    <published>2012-10-24T00:00:00Z</published>
    <updated>2012-10-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is something I was thinking about yesterday night, trying to get asleep. Some of my colleagues are very argumentative about the role a computer scientist must have: someone thinks that only who builds abstractions (call him architect or whatever) is the only person worth respect in a company. Others, like me, thinks that any programming role could be something extremely interesting and compelling if you see it on a different perspective.</p>
<h3 id="the-windows-repairer">The windows repairer</h3>
<p>I don’t know if someone come up with this definition, but I could easily define myself a “windows repairer” or a “windows fixer”, if you prefer. The “broken window” paradigm was popularized by Andy Hunt and Dave Thomas in their masterpiece <a href="http://pragprog.com/book/tpp/the-pragmatic-programmer">The pragmatic programmer</a>. In one of the first tip of the book they introduce the <em>broken window principle</em>: sometimes, all you need to make your software rot is a broken window, intended as a single messy point where you introduce an hack, code duplication or a not-optimal design choice. The <em>“broken window”</em> is dangerous because it rapidly becomes a code quality metric. You start saying “Yea, after all I already used that hack there, so I’m gonna use it too..”, and pretty soon you got a building with <em>two</em> broken windows, and the overall code quality degrades. Conversely, if you have a clean code, you are more reticent about introducing and hack or a poor programming choice. You <em>feel</em> the quality and you are proud of the “perfect temple” you have created.</p>
<h3 id="the-real-world">The real world</h3>
<p>Most of the time, though, you can’t program that way. The real world is full of broken windows. Reasons are multiple: short deadlines, throw away code, inaccuracy and so on so forth. You sometimes are put on a legacy project and they say to you “We have this huge amount of spaghetti code, and we want brand new features on top of that”. Here programmers are split in a half: One half just hate to maintain and improve legacy code, other half just love it. I don’t know if I really “love” to maintain spaghetti code, but I think that sometime fix is better than create.</p>
<h3 id="the-false-misconception">The false misconception</h3>
<p>There is this false misconception that brings programmer to prefer evergreen project. Sure, you must be creative to design a new architecture, but I think that the same level of creativity can be achieved modifying legacy code. How? Let’s take as motto what uncle Bob says in his authoritative book <em>Clean Code</em>: he says that <strong>we should always leave the camp cleaner than when we have found that</strong>. What does it mean? That we should put all our effort in improving the quality of the code we write and maintain.</p>
<h3 id="work-as-a-surgeon">Work as a surgeon</h3>
<p>A surgeon operates on a patient, sometimes working and reversing a very bad situation. He <em>cures</em> the patient, not just throw away his work. He cares in what he does, because he knows that a human life is at stake. As a surgeon, we must care about our craft, even if craft is something we have inherited. We can start developing adequate code coverage to be confident we won’t break anything already coded, and then we can start operating. We can begin simplifying messy functions, extracting other functions/methods and testing everything as we proceed. It can become fun and addictive: how we can further simplify this code? What lovely one-liner can we use? If we love functional programming, we can replace our messy <code>for</code> with <code>map</code> or using <code>filter</code> elegantly to restrict our result. If we operate in the Java World, for example, we can use the <em>Guava</em> libraries to prevent us from the dreadful <code>NullPointerException</code>. Conversely, if we just think “this code sucks, I’m not gonna to maintain it, I’m gonna write my layer on top of that” sooner or later you we’ll be caught up into the “broken window paranoia”. Since the code quality is low and most of your design choices were biased by that crappy code, you’ll start to see your code with the same nasty glance you look at the legacy code. You don’t feel this system like <em>your craft</em>, so you are not too motivated in make that beautiful. Conversely, if you spent a certain amount of time improving the existing code base, not only you’ll end up with a more robust system (which is always an advantage) but you’ll begin feeling proud of what you have done: “Look at this code”, you’ll say - “it was crap three months ago and now is fully of best practices!”. You will begin considering that code <em>a your craft</em>, and you’ll be more cautious when you’ll modify it. You will be more motivated in keeping as clean and as beautiful as you can.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Sometimes work with existing code sucks, but you have to put up with it. You have two ways to approach the problem: the “wrong” way, when you want to hide the legacy code and the “right” (at least for me) way to do that. <em>Embrace the existing code</em>, turn something ugly into something beautiful. Be a savvy artisan and like a sculptor painstakingly improve your creation.</p>
<p>In other terms, <strong>fix your windows</strong>.</p>]]></summary>
</entry>
<entry>
    <title>Getting serious about Haskell</title>
    <link href="http://www.alfredodinapoli.com/posts/2012-09-13-getting-serious-about-haskell.html" />
    <id>http://www.alfredodinapoli.com/posts/2012-09-13-getting-serious-about-haskell.html</id>
    <published>2012-09-13T00:00:00Z</published>
    <updated>2012-09-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For my entire development life, I’ve always tried to go in breadth rather than in depth. This means that I focused in learning every kind of languages/technologies available, always with a lot of commitment. I’ve learned about fantastic language and technologies, and I think that the result was worth my time. Now that I’m a little more mature of when I was 5 years ago, it’s time for me to go in depth, focusing on what I really like and what I want to turn into a profession. The more I dig inside functional programming, the more I love it. It’s true, there are some dark spot and rough edges, but once you find yourself in the Rabbit’s hole, a hole full of Monads and other cool abstraction, it’s hard to come back in the old, imperative world.</p>
<p>With this in mind, I’ve decided to focus my efforts around three languages: <strong>Haskell</strong>, <strong>OCaml</strong> and <strong>Scala</strong>, with an eye for the first two. The reason is very simple: OCaml has a strong commercial side, this means that at the moment is easier (at least in Europe) to find commercial users of the OCaml language, although Haskell is used for things like financial trading. Although OCaml has a rich ecosystem, the language is pretty simple to grasp, so it doesn’t require to constantly hack with it to keep your muscle fibers sharp.</p>
<p>Haskell is another story. I’ve only discovered the tip of the iceberg, and I’m far from being even an intermediate developer. Sure, I know and I can apply Functors, Applicative, Monoids and Monads, but things like Transformes, isomorphism, catamorphism, cathegory theory, type families and so on and so forth are strange beasts for me. I’ve also posted in the Haskell ML and I’ve got a lot of encouragements, another sign about how the community is friendly and fantastic. Said that, I’ve also started contributing to my first “serious” open source project: the <a href="http://snapframework.com">Snap Framework</a>. I hope to learn a lot as I progress.</p>
<p>A thing is sure. I want to earn a living with FP.</p>]]></summary>
</entry>
<entry>
    <title>Blog migration</title>
    <link href="http://www.alfredodinapoli.com/posts/2012-07-30-migrating-my-website.html" />
    <id>http://www.alfredodinapoli.com/posts/2012-07-30-migrating-my-website.html</id>
    <published>2012-07-30T00:00:00Z</published>
    <updated>2012-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m in the process of migrating my old blog to my professional website (here). The old blog is still reachable here:</p>
<div data-align="center">
<p><a href="http://alfredodinapoli.wordpress.com">My old blog</a></p>
</div>]]></summary>
</entry>

</feed>
